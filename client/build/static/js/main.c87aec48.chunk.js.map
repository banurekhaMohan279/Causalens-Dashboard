{"version":3,"sources":["assets/css/Header.style.js","components/Header.jsx","utils/useDataApi.js","components/Select.jsx","components/Charts/BarChart.jsx","components/Table.jsx","components/Charts/LineChart.jsx","views/Dashboard.jsx","utils/GlobalStyle.js","App.js","index.js"],"names":["HeaderBtn","styled","header","Header","Row","useDataApi","initialUrl","initialData","useState","data","setData","url","setUrl","isLoading","setIsLoading","isError","setIsError","useEffect","a","fetch","result","json","res","fetchData","Select","props","series","setSeries","Form","Group","Label","Control","as","size","custom","onChange","e","preventDefault","currentTarget","value","console","log","map","element","toString","BarChartComponent","featureImportance","Object","entries","key","push","name","pv","className","BarChart","width","height","margin","top","right","bottom","left","layout","XAxis","type","YAxis","dataKey","Tooltip","Bar","fill","LabelList","position","TableComponent","heading","Table","striped","bordered","hover","variant","item","displayBody","LineChartComponent","existing","predicted","results","itm","find","index","prediction","style","padding","LineChart","CartesianGrid","stroke","Brush","filterNull","Line","yAxisId","activeDot","r","Dashboard","currentSeries","setCurrentSeries","setExisting","setPredicted","urls","requests","Promise","all","then","responses","Container","fluid","Col","predictions","modelSummary","confusionMetric","GlobalStyle","createGlobalStyle","theme","ThemeContext","React","createContext","App","setTheme","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c87aec48.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const HeaderBtn = styled.header`\n  background: #20222f;\n  height: 2rem;\n  width: 100%;\n`;\n","import React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport { HeaderBtn } from \"../assets/css/Header.style.js\";\n\nconst Header = () => {\n  return (\n    <Row>\n      <HeaderBtn>Causalens Dashboard</HeaderBtn>\n    </Row>\n  );\n};\nexport default Header;\n","import { useState, useEffect } from \"react\";\nconst useDataApi = (initialUrl, initialData) => {\n  const [data, setData] = useState(initialData);\n  const [url, setUrl] = useState(initialUrl);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n\n      try {\n        const result = await fetch(url);\n        const res = await result.json();\n        setData(res);\n      } catch (error) {\n        setIsError(true);\n      }\n\n      setIsLoading(false);\n    };\n\n    fetchData();\n  }, [url]);\n\n  return [data, isLoading, isError, setUrl];\n};\n\nexport default useDataApi;\n","import { Form } from \"react-bootstrap\";\nimport useDataApi from \"../utils/useDataApi\";\n\nconst Select = props => {\n  const { series, setSeries } = props;\n  const [data, isLoading, isError, doFetch] = useDataApi(\n    \"http://localhost:3002/series\",\n    []\n  );\n\n  const handleChange = e => {\n    e.preventDefault();\n    setSeries(e.currentTarget.value);\n    console.log(\"setting current series\");\n  };\n\n  return (\n    <>\n      {isError && <div>Something went wrong ...</div>}\n      {isLoading ? (\n        <div>Loading ...</div>\n      ) : (\n        <>\n          <Form>\n            <Form.Group>\n              <Form.Label>Select Series</Form.Label>\n              <Form.Control\n                as=\"select\"\n                size=\"sm\"\n                custom\n                onChange={handleChange}\n              >\n                {data.map(element => (\n                  <option key={element.toString()}>{element}</option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n          </Form>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Select;\n","import { BarChart, XAxis, YAxis, Tooltip, Bar, LabelList } from \"recharts\";\n\nexport default function BarChartComponent(props) {\n  const featureImportance = props.featureImportance;\n  let result = [];\n  if (featureImportance) {\n    for (const [key, value] of Object.entries(featureImportance)) {\n      if (value > 0) result.push({ name: key, pv: value });\n    }\n  }\n\n  return (\n    <>\n      <h5> Feature Importance </h5>\n      <div className=\"area-chart-wrapper\">\n        <BarChart\n          width={400}\n          height={400}\n          data={result}\n          margin={{ top: 20, right: 50, bottom: 20, left: 50 }}\n          layout=\"vertical\"\n        >\n          <XAxis type=\"number\" />\n          <YAxis dataKey=\"name\" type=\"category\" />\n          <Tooltip />\n          <Bar dataKey=\"pv\" fill=\"#387908\">\n            <LabelList position=\"right\" />\n          </Bar>\n        </BarChart>\n      </div>\n    </>\n  );\n}\n","import Table from \"react-bootstrap/Table\";\n\nexport default function TableComponent(props) {\n  const { heading, header, data } = props;\n\n  function displayBody() {\n    if (data) {\n      return Object.entries(data).map(([key, value]) => {\n        return (\n          <tr key={key.toString()}>\n            <td> {key} </td>\n            <td> {value} </td>\n          </tr>\n        );\n      });\n    }\n  }\n\n  return (\n    <>\n      <h5> {heading} </h5>\n      <Table striped bordered hover variant=\"dark\">\n        <thead>\n          <tr>\n            {header.map(item => {\n              return <th key={item.toString()}> {item} </th>;\n            })}\n          </tr>\n        </thead>\n        <tbody>{displayBody()}</tbody>\n      </Table>\n    </>\n  );\n}\n","import {\n  LineChart,\n  XAxis,\n  Tooltip,\n  CartesianGrid,\n  Brush,\n  Line\n} from \"recharts\";\n\nexport default function LineChartComponent(props) {\n  const { existing, predicted } = props;\n  let results = existing.map(itm => ({\n    ...predicted.find(item => item.index === itm.index && item.prediction),\n    ...itm\n  }));\n\n  return (\n    <div className=\"line-chart-wrapper\" style={{ padding: 40 }}>\n      <LineChart\n        width={400}\n        height={400}\n        data={results}\n        margin={{ top: 10, bottom: 10, left: 30, right: 30 }}\n      >\n        <XAxis dataKey=\"index\" />\n        <CartesianGrid stroke=\"#f5f5f5\" />\n        <Brush />\n        <Tooltip filterNull={false} />\n        <Line\n          type=\"monotone\"\n          key={\"0\"}\n          dataKey=\"prediction\"\n          stroke=\"#132908\"\n          yAxisId={1}\n          activeDot={{ fill: \"#132908\", stroke: \"none\", r: 6 }}\n        />\n        <Line\n          type=\"monotone\"\n          key={\"1\"}\n          dataKey={props.series}\n          stroke=\"#387908\"\n          yAxisId={1}\n          activeDot={{ fill: \"#387908\", stroke: \"none\", r: 6 }}\n        />\n      </LineChart>\n    </div>\n  );\n}\n","//import {GridBtn, GridTile} from '../assets/css/Dashboard.style.js'\nimport { useEffect, useState } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Select from \"../components/Select.jsx\";\nimport BarChartComponent from \"../components/Charts/BarChart\";\nimport TableComponent from \"../components/Table\";\nimport LineChartComponent from \"../components/Charts/LineChart\";\n\nfunction Dashboard() {\n  const [currentSeries, setCurrentSeries] = useState(\"example.X\");\n  const [existing, setExisting] = useState([]);\n  const [predicted, setPredicted] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  let urls = [\n    `http://localhost:3002/data/${currentSeries}`,\n    `http://localhost:3002/results/${currentSeries}`\n  ];\n\n  useEffect(() => {\n    setIsLoading(true);\n    let requests = urls.map(url => fetch(url));\n    Promise.all(requests)\n      .then(responses => Promise.all(responses.map(r => r.json())))\n      .then(results => {\n        setExisting(results[0]);\n        setPredicted(results[1]);\n        setIsLoading(false);\n      });\n  }, [currentSeries]);\n\n  /*\n  useEffect(()=>{\n     [existing, isLoading, isError1, doFetch1] = useDataApi(`http://localhost:3002/data/${currentSeries}`,[]);\n     [predicted, isLoading2, isError2, doFetch2] = useDataApi(`http://localhost:3002/results/${currentSeries}`,[]);\n  },[currentSeries]);*/\n\n  function LoadData() {\n    return (\n      <>\n        <Row>\n          <Col>\n            {\" \"}\n            <LineChartComponent\n              existing={existing}\n              predicted={predicted.predictions}\n              series={currentSeries}\n            />{\" \"}\n          </Col>\n          <Col>\n            <BarChartComponent\n              featureImportance={predicted.featureImportance}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <TableComponent\n              heading=\"Model Details\"\n              header={[\"Property\", \"Value\"]}\n              data={predicted.modelSummary}\n            />\n          </Col>\n          <Col>\n            <TableComponent\n              heading=\"Scoring Metrics\"\n              header={[\"Metric\", \"Value\"]}\n              data={predicted[\"scoring_metrics\"]}\n            />\n          </Col>\n          <Col>\n            <TableComponent\n              heading=\"Confusion Matrix\"\n              header={[\"\", \"Positive\", \"Negative\"]}\n              data={predicted.confusionMetric}\n            />\n          </Col>\n        </Row>\n      </>\n    );\n  }\n\n  return (\n    <Container fluid>\n      <Select series={currentSeries} setSeries={setCurrentSeries} />\n      {isLoading ? <div> Loading... </div> : LoadData()}\n    </Container>\n  );\n}\nexport default Dashboard;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    background: ${props => (props.theme ? \"beige\" : \"white\")};\n  }\n  html, body, #root{\n    height: 100%;\n  }\n  .container{\n    height: 100%;\n  }\n`;\n","import React, {useState} from 'react'\nimport Header from './components/Header.jsx'\nimport Dashboard from './views/Dashboard.jsx'\nimport {GlobalStyle} from './utils/GlobalStyle'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nexport const ThemeContext = React.createContext()\n\nconst App = () => {\n  const [theme, setTheme] = useState('light');\n  return (\n  <ThemeContext.Provider value = {{theme,setTheme}}>\n      <GlobalStyle/>\n        <Header />\n        <Dashboard />\n  </ThemeContext.Provider>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}