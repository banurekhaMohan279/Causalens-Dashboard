{"version":3,"sources":["utils/usePersistedState.js","assets/css/GlobalStyle.style.js","assets/css/Header.style.js","assets/css/Checkbox.style.js","components/Checkbox.jsx","components/Header.jsx","utils/useDataApi.js","components/Select.jsx","components/Charts/BarChart.jsx","components/1DTable.jsx","components/2DTable.jsx","components/Charts/LineChart.jsx","views/Dashboard.jsx","App.js","index.js"],"names":["usePersistedState","key","defaultValue","useState","storedValue","localStorage","getItem","JSON","parse","state","setState","useEffect","setItem","stringify","lightbg","darkbg","lightfont","darkfont","GlobalStyle","createGlobalStyle","props","light","HeaderBtn","styled","header","CheckBoxInput","input","Checkbox","useContext","ThemeContext","theme","setTheme","id","type","onChange","e","prev","defaultChecked","Header","Row","useDataApi","initialUrl","initialData","cache","useRef","data","setData","url","setUrl","isLoading","setIsLoading","isError","setIsError","a","current","fetch","result","json","res","fetchData","Select","series","setSeries","Form","Group","Label","Control","as","size","custom","preventDefault","currentTarget","value","map","element","toString","BarChartComponent","featureImportance","Object","entries","push","index","toFixed","ResponsiveContainer","className","BarChart","width","height","margin","top","right","bottom","left","layout","XAxis","datakey","YAxis","dataKey","Tooltip","Bar","fill","LabelList","position","OneDTable","heading","Table","striped","bordered","hover","variant","item","Number","displayBody","TwoDTable","i","entry","j","LineChartComponent","existing","predicted","results","itm","find","prediction","LineChart","CartesianGrid","strokeDasharray","Brush","Line","stroke","activeDot","r","Dashboard","currentSeries","setCurrentSeries","setExisting","setPredicted","urls","requests","Promise","all","then","responses","Container","fluid","Col","predictions","modelSummary","confusionMetric","React","createContext","App","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dce94368.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport default function usePersistedState(key, defaultValue) {\n  const [state, setState] = useState(() => {\n    const storedValue = localStorage.getItem(key);\n    return storedValue !== null ? JSON.parse(storedValue) : defaultValue;\n  });\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n  return [state, setState];\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nconst lightbg = \"#F7F9FF\";\nconst darkbg = \"#20222F\";\nconst lightfont = \"#F7F9FF\";\nconst darkfont = \"#20222F\";\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    background: ${props => (props.light ? lightbg : darkbg)};\n  }\n\n  header{\n    background: ${props => (props.light ? darkbg : lightbg)};\n    color: ${props => (props.light ? lightfont : darkfont)};\n  }\n\n  h5, label{\n    color: ${props => (props.light ? darkfont : lightfont)};\n  }\n\n`;\n","import styled from \"styled-components\";\n\nexport const HeaderBtn = styled.header`\n  height: 3rem;\n  width: 100%;\n  padding: 0.5rem 0rem 0.5rem 2rem;\n  font-weight: bold;\n  margin-bottom: 0.5rem;\n`;\n","import styled from \"styled-components\";\n\nexport const CheckBoxInput = styled.input`\n  float: right;\n  padding: 0.5rem;\n  margin: 0.5rem 2rem;\n  &:checked:after {\n    color: #20222f;\n  }\n  &:after {\n    color: #f7f9ff;\n  }\n`;\n","import { CheckBoxInput } from \"../assets/css/Checkbox.style.js\";\nimport { useContext } from \"react\";\nimport { ThemeContext } from \"../App\";\n\nconst Checkbox = () => {\n  const { theme, setTheme } = useContext(ThemeContext);\n  const handleChange = e => setTheme(prev => !prev);\n  return (\n    <>\n      <CheckBoxInput\n        id=\"input\"\n        type=\"checkbox\"\n        onChange={handleChange}\n        defaultChecked={theme}\n      />\n    </>\n  );\n};\n\nexport default Checkbox;\n","import Row from \"react-bootstrap/Row\";\nimport { HeaderBtn } from \"../assets/css/Header.style.js\";\nimport Checkbox from \"./Checkbox.jsx\";\n\nconst Header = () => {\n  return (\n    <Row>\n      <HeaderBtn>\n        Causalens Dashboard\n        <Checkbox />\n      </HeaderBtn>\n    </Row>\n  );\n};\nexport default Header;\n","import { useState, useEffect, useRef } from \"react\";\n\nconst useDataApi = (initialUrl, initialData) => {\n  const cache = useRef({});\n  const [data, setData] = useState(initialData);\n  const [url, setUrl] = useState(initialUrl);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    if (!url) return;\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n      if (cache.current[url]) {\n        const data = cache.current[url];\n        setData(data);\n        setIsLoading(false);\n      }\n      try {\n        const result = await fetch(url);\n        const res = await result.json();\n        setData(res);\n      } catch (error) {\n        setIsError(true);\n      }\n\n      setIsLoading(false);\n    };\n\n    fetchData();\n  }, []);\n\n  return [data, isLoading, isError, setUrl];\n};\n\nexport default useDataApi;\n","import { Form } from \"react-bootstrap\";\nimport useDataApi from \"../utils/useDataApi\";\n\nconst Select = props => {\n  const { series, setSeries } = props;\n  const [data, isError] = useDataApi(\"http://localhost:3002/series\", []);\n\n  const handleChange = e => {\n    e.preventDefault();\n    setSeries(e.currentTarget.value);\n  };\n\n  return (\n    <>\n      {isError && <div>Something went wrong ...</div>}\n      <Form>\n        <Form.Group>\n          <Form.Label>Select Series</Form.Label>\n          <Form.Control\n            as=\"select\"\n            size=\"sm\"\n            custom\n            onChange={handleChange}\n            defaultValue={series}\n          >\n            {data.map(element => (\n              <option key={element.toString()}>{element}</option>\n            ))}\n          </Form.Control>\n        </Form.Group>\n      </Form>\n    </>\n  );\n};\n\nexport default Select;\n","import {\n  BarChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Bar,\n  LabelList,\n  ResponsiveContainer\n} from \"recharts\";\n//import BarChartD3 from \"./pureD3/BarChart/BarChart.jsx\";\n\nexport default function BarChartComponent(props) {\n  const featureImportance = props.featureImportance;\n  let result = [];\n  if (featureImportance) {\n    for (const [key, value] of Object.entries(featureImportance)) {\n      if (value > 0) result.push({ index: key, value: value.toFixed(3) });\n    }\n  }\n\n  return (\n    <>\n      <ResponsiveContainer>\n        <div className=\"area-chart-wrapper\">\n          <h5> Feature Importance </h5>\n          <BarChart\n            width={400}\n            height={400}\n            data={result}\n            margin={{ top: 20, right: 50, bottom: 20, left: 50 }}\n            layout=\"vertical\"\n          >\n            <XAxis datakey=\"value\" type=\"number\" />\n            <YAxis dataKey=\"index\" type=\"category\" />\n            <Tooltip />\n            <Bar dataKey=\"value\" fill=\"#1EB589\">\n              <LabelList position=\"right\" />\n            </Bar>\n          </BarChart>\n        </div>\n      </ResponsiveContainer>\n    </>\n  );\n}\n","import Table from \"react-bootstrap/Table\";\n\nexport default function OneDTable(props) {\n  const { heading, header, data } = props;\n\n  function displayBody() {\n    if (data) {\n      return Object.entries(data).map(([key, value]) => {\n        return (\n          <tr key={key.toString()}>\n            <td> {key} </td>\n            <td> {Number(value) ? value.toFixed(3) : value} </td>\n          </tr>\n        );\n      });\n    }\n  }\n\n  return (\n    <>\n      <h5> {heading} </h5>\n      <Table striped bordered hover variant=\"dark\">\n        <thead>\n          <tr>\n            {header.map(item => {\n              return <th key={item.toString()}> {item} </th>;\n            })}\n          </tr>\n        </thead>\n        <tbody>{displayBody()}</tbody>\n      </Table>\n    </>\n  );\n}\n","import Table from \"react-bootstrap/Table\";\n\nexport default function TwoDTable(props) {\n  const { heading, data } = props;\n\n  function displayBody() {\n    let res = [];\n    // restruturing confusionmetric object to a 2D array\n    if (data) {\n      res.push(\n        [\" \", \"Positive\", \"Negative\"],\n        [\"Positive\", data[\"truePositive\"], data[\"trueNegative\"]],\n        [\"Negative\", data[\"falsePositive\"], data[\"falseNegative\"]]\n      );\n      let rows = res.map((item, i) => {\n        let entry = item.map((element, j) => {\n          return <td key={j}>{element}</td>;\n        });\n        return <tr key={i}>{entry}</tr>;\n      });\n      return rows;\n    }\n  }\n\n  return (\n    <>\n      <h5> {heading} </h5>\n      <Table striped bordered hover variant=\"dark\">\n        <tbody>{displayBody()}</tbody>\n      </Table>\n    </>\n  );\n}\n","import {\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid,\n  Brush,\n  Line,\n  ResponsiveContainer\n} from \"recharts\";\n//import { timeFormat } from \"d3\";\n\nexport default function LineChartComponent(props) {\n  const { series, existing, predicted } = props;\n\n  let results = existing.map(itm => ({\n    ...predicted.find(\n      item => item.index === itm.index && item.prediction && itm[series]\n    ),\n    ...itm\n  }));\n\n  return (\n    <ResponsiveContainer>\n      <div className=\"line-chart-wrapper\">\n        <h5> Actual vs Prediction Plot - {series}</h5>\n        <LineChart\n          width={400}\n          height={400}\n          data={results}\n          margin={{ top: 10, bottom: 10, left: 10, right: 30 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"index\" />\n          <YAxis />\n          <Brush />\n          <Tooltip />\n          <Line\n            type=\"monotone\"\n            dataKey=\"prediction\"\n            stroke=\"#178FF5\"\n            activeDot={{ fill: \"#132908\", stroke: \"none\", r: 6 }}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey={series}\n            stroke=\"#1EB589\"\n            activeDot={{ fill: \"#387908\", stroke: \"none\", r: 6 }}\n          />\n        </LineChart>\n      </div>\n    </ResponsiveContainer>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport usePersistedState from \"../utils/usePersistedState\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Select from \"../components/Select.jsx\";\nimport BarChartComponent from \"../components/Charts/BarChart\";\nimport OneDTable from \"../components/1DTable\";\nimport TwoDTable from \"../components/2DTable\";\nimport LineChartComponent from \"../components/Charts/LineChart\";\n\nfunction Dashboard() {\n  const [currentSeries, setCurrentSeries] = usePersistedState(\n    \"currentSeries\",\n    \"example.X\"\n  );\n  const [existing, setExisting] = useState([]);\n  const [predicted, setPredicted] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  let urls = [\n    `http://localhost:3002/data/${currentSeries}`,\n    `http://localhost:3002/results/${currentSeries}`\n  ];\n\n  useEffect(() => {\n    setIsLoading(true);\n    let requests = urls.map(url => fetch(url));\n    Promise.all(requests)\n      .then(responses => Promise.all(responses.map(r => r.json())))\n      .then(results => {\n        setExisting(results[0]);\n        setPredicted(results[1]);\n        setIsLoading(false);\n      });\n  }, [currentSeries]);\n\n  /*\n  useEffect(()=>{\n     [existing, isLoading, isError1, doFetch1] = useDataApi(`http://localhost:3002/data/${currentSeries}`,[]);\n     [predicted, isLoading2, isError2, doFetch2] = useDataApi(`http://localhost:3002/results/${currentSeries}`,[]);\n  },[currentSeries]);*/\n\n  function LoadData() {\n    return (\n      <>\n        <Row>\n          <Col>\n            {\" \"}\n            <LineChartComponent\n              existing={existing}\n              predicted={predicted.predictions}\n              series={currentSeries}\n            />{\" \"}\n          </Col>\n          <Col>\n            <BarChartComponent\n              featureImportance={predicted.featureImportance}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <OneDTable\n              heading=\"Model Details\"\n              header={[\"Property\", \"Value\"]}\n              data={predicted.modelSummary}\n            />\n          </Col>\n          <Col>\n            <OneDTable\n              heading=\"Scoring Metrics\"\n              header={[\"Metric\", \"Value\"]}\n              data={predicted[\"scoring_metrics\"]}\n            />\n          </Col>\n          <Col>\n            <TwoDTable\n              heading=\"Confusion Matrix\"\n              data={predicted.confusionMetric}\n            />\n          </Col>\n        </Row>\n      </>\n    );\n  }\n\n  return (\n    <Container fluid>\n      <Select series={currentSeries} setSeries={setCurrentSeries} />\n      {isLoading ? <div> Loading... </div> : LoadData()}\n    </Container>\n  );\n}\nexport default Dashboard;\n","import React from \"react\";\nimport usePersistedState from \"./utils/usePersistedState\";\nimport { GlobalStyle } from \"./assets/css/GlobalStyle.style\";\nimport Header from \"./components/Header.jsx\";\nimport Dashboard from \"./views/Dashboard.jsx\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nexport const ThemeContext = React.createContext();\n\nconst App = () => {\n  const [theme, setTheme] = usePersistedState(\"light\", true);\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      <GlobalStyle light={theme} />\n      <Header />\n      <Dashboard />\n    </ThemeContext.Provider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}