{"version":3,"sources":["utils/usePersistedState.js","utils/GlobalStyle.js","assets/css/Header.style.js","components/Header.jsx","utils/useDataApi.js","components/Select.jsx","components/Charts/BarChart.jsx","components/Table.jsx","components/Charts/LineChart.jsx","views/Dashboard.jsx","App.js","index.js"],"names":["usePersistedState","key","defaultValue","useState","storedValue","localStorage","getItem","JSON","parse","state","setState","useEffect","setItem","stringify","GlobalStyle","createGlobalStyle","props","toggle","HeaderBtn","styled","header","Label","label","CheckBoxInput","input","Header","useContext","ThemeContext","setTheme","theme","Row","id","type","onChange","e","prev","htmlFor","useDataApi","initialUrl","initialData","cache","useRef","data","setData","url","setUrl","isLoading","setIsLoading","isError","setIsError","a","console","log","current","fetch","result","json","res","fetchData","Select","series","setSeries","Form","Group","Control","as","size","custom","preventDefault","currentTarget","value","map","element","selected","toString","BarChartComponent","featureImportance","Object","entries","push","index","className","BarChart","width","height","margin","top","right","bottom","left","layout","XAxis","YAxis","dataKey","Tooltip","Bar","fill","LabelList","position","TableComponent","heading","Table","striped","bordered","hover","variant","item","displayBody","LineChartComponent","existing","predicted","results","itm","find","prediction","style","padding","LineChart","CartesianGrid","stroke","Brush","filterNull","Line","yAxisId","activeDot","r","Dashboard","currentSeries","setCurrentSeries","setExisting","setPredicted","urls","requests","Promise","all","then","responses","Container","fluid","Col","predictions","modelSummary","confusionMetric","React","createContext","App","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71ae94d5.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport default function usePersistedState(key, defaultValue) {\n  const [state, setState] = useState(() => {\n    const storedValue = localStorage.getItem(key);\n    return storedValue !== null ? JSON.parse(storedValue) : defaultValue;\n  });\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n  return [state, setState];\n}\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    background: ${props => (props.toggle ? \"#F7F9FF\" : \"#20222F\")};\n  }\n\n  header{\n    background: ${props => (props.toggle ? \"#20222F\" : \"#F7F9FF\")};\n    color: ${props => (props.toggle ? \"#F7F9FF\" : \"#20222F\")};\n  }\n\n`;\n","import styled from \"styled-components\";\n\nexport const HeaderBtn = styled.header`\n  height: 3rem;\n  width: 100%;\n  padding: 0.5rem 0rem 0.5rem 2rem;\n  font-weight: bold;\n  margin-bottom: 0.5rem;\n`;\n\nexport const Label = styled.label`\n  background: #20222f;\n  display: block;\n  padding: 0.5rem;\n  border: 1px solid #000;\n  &:after {\n    content: \"Light\";\n    color: #f7f9ff;\n  }\n`;\n\nexport const CheckBoxInput = styled.input`\n  &:checked + ${Label} {\n    background: #f7f9ff;\n  }\n  &:checked + ${Label}:after {\n    content: \"Dark\";\n    color: #20222f;\n  }\n`;\n","import React, { useState } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\nimport { HeaderBtn, CheckBoxInput, Label } from \"../assets/css/Header.style.js\";\nimport { useContext } from \"react\";\nimport { ThemeContext } from \"../App\";\n\nconst Header = () => {\n  const { theme, setTheme } = useContext(ThemeContext);\n\n  const handleChange = e => setTheme(prev => !prev);\n\n  return (\n    <Row>\n      <HeaderBtn>Causalens Dashboard</HeaderBtn>\n      <CheckBoxInput id=\"input\" type=\"checkbox\" onChange={handleChange} />\n      <Label htmlFor=\"input\" />\n    </Row>\n  );\n};\nexport default Header;\n","import { useState, useEffect, useRef } from \"react\";\n\nconst useDataApi = (initialUrl, initialData) => {\n  const cache = useRef({});\n  const [data, setData] = useState(initialData);\n  const [url, setUrl] = useState(initialUrl);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    if (!url) return;\n    const fetchData = async () => {\n      setIsError(false);\n      setIsLoading(true);\n      console.log(\"same...\", cache.current);\n      if (cache.current[url]) {\n        console.log(\"sam\", cache.current);\n        const data = cache.current[url];\n        setData(data);\n        setIsLoading(false);\n      }\n      try {\n        const result = await fetch(url);\n        const res = await result.json();\n        setData(res);\n      } catch (error) {\n        setIsError(true);\n      }\n\n      setIsLoading(false);\n    };\n\n    fetchData();\n  }, []);\n\n  return [data, isLoading, isError, setUrl];\n};\n\nexport default useDataApi;\n","import { Form } from \"react-bootstrap\";\nimport useDataApi from \"../utils/useDataApi\";\n\nconst Select = props => {\n  const { series, setSeries } = props;\n  const [data, isLoading, isError, doFetch] = useDataApi(\n    \"http://localhost:3002/series\",\n    []\n  );\n\n  const handleChange = e => {\n    e.preventDefault();\n    setSeries(e.currentTarget.value);\n    console.log(\"setting current series\");\n  };\n\n  return (\n    <>\n      {isError && <div>Something went wrong ...</div>}\n      {isLoading ? (\n        <div>Loading ...</div>\n      ) : (\n        <>\n          <Form>\n            <Form.Group>\n              <Form.Label>Select Series</Form.Label>\n              <Form.Control\n                as=\"select\"\n                size=\"sm\"\n                custom\n                onChange={handleChange}\n              >\n                {data.map(element => (\n                  <option\n                    key={element.toString()}\n                    selected={element === series}\n                  >\n                    {element}\n                  </option>\n                ))}\n              </Form.Control>\n            </Form.Group>\n          </Form>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Select;\n","import { BarChart, XAxis, YAxis, Tooltip, Bar, LabelList } from \"recharts\";\n\nexport default function BarChartComponent(props) {\n  const featureImportance = props.featureImportance;\n  let result = [];\n  if (featureImportance) {\n    for (const [key, value] of Object.entries(featureImportance)) {\n      if (value > 0) result.push({ index: key, value: value });\n    }\n  }\n\n  return (\n    <>\n      <h5> Feature Importance </h5>\n      <div className=\"area-chart-wrapper\">\n        <BarChart\n          width={400}\n          height={400}\n          data={result}\n          margin={{ top: 20, right: 50, bottom: 20, left: 50 }}\n          layout=\"vertical\"\n        >\n          <XAxis type=\"number\" />\n          <YAxis dataKey=\"index\" type=\"category\" />\n          <Tooltip />\n          <Bar dataKey=\"value\" fill=\"#387908\">\n            <LabelList position=\"right\" />\n          </Bar>\n        </BarChart>\n      </div>\n    </>\n  );\n}\n","import Table from \"react-bootstrap/Table\";\n\nexport default function TableComponent(props) {\n  const { heading, header, data } = props;\n\n  function displayBody() {\n    if (data) {\n      return Object.entries(data).map(([key, value]) => {\n        return (\n          <tr key={key.toString()}>\n            <td> {key} </td>\n            <td> {value} </td>\n          </tr>\n        );\n      });\n    }\n  }\n\n  return (\n    <>\n      <h5> {heading} </h5>\n      <Table striped bordered hover variant=\"dark\">\n        <thead>\n          <tr>\n            {header.map(item => {\n              return <th key={item.toString()}> {item} </th>;\n            })}\n          </tr>\n        </thead>\n        <tbody>{displayBody()}</tbody>\n      </Table>\n    </>\n  );\n}\n","import {\n  LineChart,\n  XAxis,\n  Tooltip,\n  CartesianGrid,\n  Brush,\n  Line\n} from \"recharts\";\nimport d3 from \"d3\";\n\nexport default function LineChartComponent(props) {\n  const { existing, predicted } = props;\n\n  let results = existing.map(itm => ({\n    ...predicted.find(item => item.index === itm.index && item.prediction),\n    ...itm\n  }));\n\n  return (\n    <div className=\"line-chart-wrapper\" style={{ padding: 40 }}>\n      <LineChart\n        width={400}\n        height={400}\n        data={results}\n        margin={{ top: 10, bottom: 10, left: 30, right: 30 }}\n      >\n        <XAxis dataKey=\"index\" />\n        <CartesianGrid stroke=\"#f5f5f5\" />\n        <Brush />\n        <Tooltip filterNull={false} />\n        <Line\n          type=\"monotone\"\n          key={\"0\"}\n          dataKey=\"prediction\"\n          stroke=\"#132908\"\n          yAxisId={1}\n          activeDot={{ fill: \"#132908\", stroke: \"none\", r: 6 }}\n        />\n        <Line\n          type=\"monotone\"\n          key={\"1\"}\n          dataKey={props.series}\n          stroke=\"#387908\"\n          yAxisId={1}\n          activeDot={{ fill: \"#387908\", stroke: \"none\", r: 6 }}\n        />\n      </LineChart>\n    </div>\n  );\n}\n","//import {GridBtn, GridTile} from '../assets/css/Dashboard.style.js'\nimport { useEffect, useState } from \"react\";\nimport usePersistedState from \"../utils/usePersistedState\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Select from \"../components/Select.jsx\";\nimport BarChartComponent from \"../components/Charts/BarChart\";\nimport TableComponent from \"../components/Table\";\nimport LineChartComponent from \"../components/Charts/LineChart\";\n\nfunction Dashboard() {\n  const [currentSeries, setCurrentSeries] = usePersistedState(\n    \"currentSeries\",\n    \"example.X\"\n  );\n  const [existing, setExisting] = useState([]);\n  const [predicted, setPredicted] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  let urls = [\n    `http://localhost:3002/data/${currentSeries}`,\n    `http://localhost:3002/results/${currentSeries}`\n  ];\n\n  useEffect(() => {\n    setIsLoading(true);\n    let requests = urls.map(url => fetch(url));\n    Promise.all(requests)\n      .then(responses => Promise.all(responses.map(r => r.json())))\n      .then(results => {\n        setExisting(results[0]);\n        setPredicted(results[1]);\n        setIsLoading(false);\n      });\n  }, [currentSeries]);\n\n  /*\n  useEffect(()=>{\n     [existing, isLoading, isError1, doFetch1] = useDataApi(`http://localhost:3002/data/${currentSeries}`,[]);\n     [predicted, isLoading2, isError2, doFetch2] = useDataApi(`http://localhost:3002/results/${currentSeries}`,[]);\n  },[currentSeries]);*/\n\n  function LoadData() {\n    return (\n      <>\n        <Row>\n          <Col>\n            {\" \"}\n            <LineChartComponent\n              existing={existing}\n              predicted={predicted.predictions}\n              series={currentSeries}\n            />{\" \"}\n          </Col>\n          <Col>\n            <BarChartComponent\n              featureImportance={predicted.featureImportance}\n            />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <TableComponent\n              heading=\"Model Details\"\n              header={[\"Property\", \"Value\"]}\n              data={predicted.modelSummary}\n            />\n          </Col>\n          <Col>\n            <TableComponent\n              heading=\"Scoring Metrics\"\n              header={[\"Metric\", \"Value\"]}\n              data={predicted[\"scoring_metrics\"]}\n            />\n          </Col>\n          <Col>\n            <TableComponent\n              heading=\"Confusion Matrix\"\n              header={[\"\", \"Positive\", \"Negative\"]}\n              data={predicted.confusionMetric}\n            />\n          </Col>\n        </Row>\n      </>\n    );\n  }\n\n  return (\n    <Container fluid>\n      <Select series={currentSeries} setSeries={setCurrentSeries} />\n      {isLoading ? <div> Loading... </div> : LoadData()}\n    </Container>\n  );\n}\nexport default Dashboard;\n","import React from \"react\";\nimport usePersistedState from \"./utils/usePersistedState\";\nimport { GlobalStyle } from \"./utils/GlobalStyle\";\nimport Header from \"./components/Header.jsx\";\nimport Dashboard from \"./views/Dashboard.jsx\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nexport const ThemeContext = React.createContext();\n\nconst App = () => {\n  const [theme, setTheme] = usePersistedState(\"light\", true);\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      <GlobalStyle toggle={theme} />\n      <Header />\n      <Dashboard />\n    </ThemeContext.Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}